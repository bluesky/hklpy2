{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compare **hkl_soleil** **E4CV** with **SPEC** **fourc**\n",
    "\n",
    "Following the E4CV [example](./hkl_soleil-e4cv.ipynb), compare the orientation matix and\n",
    "positioning operations of **hkl_soleil** **E4CV** with **SPEC** **fourc**\n",
    "\n",
    "Information from a **SPEC** data file will be used for the comparison."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In SPEC *fourc* geometry (https://certif.com/spec_help/fourc.html):\n",
    "\n",
    "SPEC name   | mnemonic   | description\n",
    "-----       | -----      | -----\n",
    "2theta      | tth        | Detector arm rotation\n",
    "Theta       | th         | Rotates sample circles\n",
    "Chi         | chi        | Sample tilt\n",
    "Phi         | phi        | Sample rotation\n",
    "\n",
    "The provided SPEC data file names these motors: `tth`, `th`, `chi`, `phi` so\n",
    "this example will use the same names with the *E4CV* diffractometer to help the\n",
    "comparison."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read the SPEC scan from the data file\n",
    "\n",
    "The SPEC file provides all the information needed here.  The\n",
    "[*spec2nexus*](https://github.com/prjemian/spec2nexus) \n",
    "(python) package can read the file and parse the content into useful \n",
    "structures, including deducing the diffractometer geometry in many cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============ =================================================================================================================================================\n",
      "term         value                                                                                                                                            \n",
      "============ =================================================================================================================================================\n",
      "SPEC file    LNO_LAO                                                                                                                                          \n",
      "scan #       14                                                                                                                                               \n",
      "SPEC scanCmd hklscan  1.00133 1.00133  1.00133 1.00133  2.85 3.05  200 -400000                                                                                \n",
      "geometry     fourc                                                                                                                                            \n",
      "mode         Omega equals zero                                                                                                                                \n",
      "lattice      LatticeParameters3D(a=3.781726143, b=3.791444574, c=3.79890313, alpha=90.2546203, beta=90.01815424, gamma=89.89967858)                           \n",
      "wavelength   1.239424258                                                                                                                                      \n",
      "reflection 1 Reflections3D(h=0.0, k=0.0, l=2.0, wavelength=1.239424258, angles=OrderedDict({'tth': 38.09875, 'th': 19.1335, 'chi': 90.0135, 'phi': 0.0}))     \n",
      "reflection 2 Reflections3D(h=1.0, k=1.0, l=3.0, wavelength=1.239424258, angles=OrderedDict({'tth': 65.644, 'th': 32.82125, 'chi': 115.23625, 'phi': 48.1315}))\n",
      "[UB]         [[-1.65871244e+00  9.82002413e-02 -3.89705578e-04]                                                                                               \n",
      "              [-9.55499031e-02 -1.65427863e+00  2.42844486e-03]                                                                                               \n",
      "              [ 2.62981891e-04  9.81574682e-03  1.65396181e+00]]                                                                                              \n",
      "============ =================================================================================================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pyRestTable\n",
    "from spec2nexus.spec import SpecDataFile\n",
    "\n",
    "specfile = SpecDataFile(\"LNO_LAO_s14.dat\")\n",
    "specscan = specfile.getScan(14)\n",
    "\n",
    "spec_d = specscan.diffractometer\n",
    "spec_d.UB = spec_d.geometry_parameters[\"ub_matrix\"][2]\n",
    "\n",
    "terms = {\n",
    "    \"SPEC file\": specfile.specFile,\n",
    "    \"scan #\": specscan.scanNum,\n",
    "    \"SPEC scanCmd\": specscan.scanCmd,\n",
    "    \"geometry\": spec_d.geometry_name,\n",
    "    \"mode\": spec_d.mode,\n",
    "    \"lattice\": spec_d.lattice,\n",
    "    \"wavelength\": spec_d.wavelength,\n",
    "    \"reflection 1\": spec_d.reflections[0],\n",
    "    \"reflection 2\": spec_d.reflections[1],\n",
    "    \"[UB]\": spec_d.UB,\n",
    "}\n",
    "tbl = pyRestTable.Table()\n",
    "tbl.labels = \"term value\".split()\n",
    "for k, v in terms.items():\n",
    "    tbl.addRow((k, v))\n",
    "print(tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the (_hkl_) trajectories in the scan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# plot the h, k, & l vs. point number\n",
    "fig, axes = plt.subplots(3, 1, figsize=(12, 6))\n",
    "fig.subplots_adjust(hspace=0.4, wspace=0.2)\n",
    "\n",
    "plt.suptitle('Desired HKL trajectory')\n",
    "axes[0].plot(specscan.data[\"H\"])\n",
    "axes[0].set_title(\"h\")\n",
    "axes[1].plot(specscan.data[\"K\"])\n",
    "axes[1].set_title(\"k\")\n",
    "axes[2].plot(specscan.data[\"L\"])\n",
    "axes[2].set_title(\"l\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup the *E4CV* diffractometer in *hklpy*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import hklpy2\n",
    "\n",
    "fourc = hklpy2.creator(\n",
    "    name=\"fourc\",\n",
    "    geometry=\"E4CV\",\n",
    "    solver=\"hkl_soleil\",\n",
    "    # use SPEC names for the axes and simulated motors (not EPICS)\n",
    "    reals=dict(th=None, chi=None, phi=None, tth=None),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sample(name='LNO_LAO', lattice=Lattice(a=3.7817, b=3.7914, c=3.7989, alpha=90.2546, beta=90.0182, gamma=89.8997, system='triclinic'))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add the sample to the calculation engine\n",
    "from hklpy2.user import add_sample, calc_UB, set_diffractometer, setor\n",
    "\n",
    "set_diffractometer(fourc)\n",
    "add_sample(\n",
    "    specfile.specFile,  # sample name\n",
    "    a=spec_d.lattice.a, \n",
    "    b=spec_d.lattice.b, \n",
    "    c=spec_d.lattice.c,\n",
    "    alpha=spec_d.lattice.alpha, \n",
    "    beta=spec_d.lattice.beta, \n",
    "    gamma=spec_d.lattice.gamma,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test *hklpy* with the **UB** orientation matrix from **SPEC**\n",
    "\n",
    "Using the UB matrix as provided in the SPEC data file, \n",
    "compute the forward reflection positions and compare with\n",
    "those calculated by **libhkl**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fourc.core.sample.UB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spec_d.UB=array([[-1.65871244e+00,  9.82002413e-02, -3.89705578e-04],\n",
      "       [-9.55499031e-02, -1.65427863e+00,  2.42844486e-03],\n",
      "       [ 2.62981891e-04,  9.81574682e-03,  1.65396181e+00]])\n",
      "[[-9.55499031e-02 -1.65427863e+00  2.42844486e-03]\n",
      " [ 2.62981891e-04  9.81574682e-03  1.65396181e+00]\n",
      " [-1.65871244e+00  9.82002413e-02 -3.89705578e-04]]=\n",
      "(002) : Hklpy2DiffractometerRealPos(th=15.262190928219, chi=0.254588904154, phi=0.017709205452, tth=30.524381856439)\n",
      "(113) : Hklpy2DiffractometerRealPos(th=25.930670824236, chi=17.793974665134, phi=18.498831314951, tth=51.861341648471)\n"
     ]
    }
   ],
   "source": [
    "# get the UB matrix from the SPEC data\n",
    "# SPEC's UB first row moved (via numpy slicing) to last row for hklpy\n",
    "fourc.core.sample.UB = spec_d.UB[[1,2,0], :]\n",
    "print(f\"{spec_d.UB=}\")\n",
    "print(f\"{fourc.core.sample.UB}=\")\n",
    "\n",
    "# calculate angles with hklpy using the SPEC UB matrix\n",
    "fourc.core.solver.mode = \"bissector\"\n",
    "fourc.core.constraints[\"phi\"].limits = (-50, 100)\n",
    "fourc.core.constraints[\"tth\"].limits = (-2, 180)\n",
    "print(f\"(002) : {fourc.forward(0, 0, 2)}\")\n",
    "print(f\"(113) : {fourc.forward(1, 1, 3)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a custom reporting function to format the output table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_ref_to_table(tbl, r):\n",
    "    sol = fourc.forward(r.h, r.k, r.l)\n",
    "    nm = f\"{r.h:.0f} {r.k:.0f} {r.l:.0f}\"\n",
    "    # print(nm, sol)\n",
    "    for sm in fourc.real_axis_names:\n",
    "        row = [f\"({nm})\", sm]\n",
    "        v_hklpy = getattr(sol, sm)\n",
    "        v_spec = r.angles[sm]\n",
    "        row.append(f\"{v_hklpy:.5f}\")\n",
    "        row.append(f\"{v_spec:.5f}\")\n",
    "        row.append(f\"{v_hklpy-v_spec:.5f}\")\n",
    "        tbl.addRow(row)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each of the orientation reflections used in the SPEC file,\n",
    "report the computed motor positions for each reflection for \n",
    "E4CV and SPEC.  We'll only pick positions where $2\\theta\\ge 0$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======= ===== ======== ========= ==========\n",
      "(hkl)   motor E4CV     SPEC      difference\n",
      "======= ===== ======== ========= ==========\n",
      "(0 0 2) th    15.26219 19.13350  -3.87131  \n",
      "(0 0 2) chi   0.25459  90.01350  -89.75891 \n",
      "(0 0 2) phi   0.01771  0.00000   0.01771   \n",
      "(0 0 2) tth   30.52438 38.09875  -7.57437  \n",
      "(1 1 3) th    25.93067 32.82125  -6.89058  \n",
      "(1 1 3) chi   17.79397 115.23625 -97.44228 \n",
      "(1 1 3) phi   18.49883 48.13150  -29.63267 \n",
      "(1 1 3) tth   51.86134 65.64400  -13.78266 \n",
      "======= ===== ======== ========= ==========\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Compare these angles with those from SPEC\n",
    "\n",
    "tbl = pyRestTable.Table()\n",
    "tbl.labels = \"(hkl) motor E4CV SPEC difference\".split()\n",
    "r1, r2 = spec_d.reflections\n",
    "\n",
    "fourc.core.solver.mode = \"bissector\"\n",
    "fourc.core.constraints[\"tth\"].limits = (-2, 180)\n",
    "add_ref_to_table(tbl, r1)\n",
    "\n",
    "# print(r2)\n",
    "add_ref_to_table(tbl, r2)\n",
    "\n",
    "print(tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the angles do not match between *E4CV* and *SPEC*,\n",
    "even if we re-arrange the rows as we did above.  Can't just\n",
    "use the UB matrix from the one program in the other\n",
    "software.\n",
    "\n",
    "Need to add the orientation reflections (with wavelength),\n",
    "then compute the UB matrix.  Follow in the section below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup the **UB** orientation matrix using *hklpy*\n",
    "\n",
    "Compute the UB matrix using *hklpy* (& *libhkl*)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "========= =========================================================================================================================================================\n",
      "term      value                                                                                                                                                    \n",
      "========= =========================================================================================================================================================\n",
      "SPEC [UB] [[-1.65871244e+00  9.82002413e-02 -3.89705578e-04]                                                                                                       \n",
      "           [-9.55499031e-02 -1.65427863e+00  2.42844486e-03]                                                                                                       \n",
      "           [ 2.62981891e-04  9.81574682e-03  1.65396181e+00]]                                                                                                      \n",
      "E4CV [UB] [[-0.095549901092, -1.654278634916, 0.002428444854], [0.000262981975, 0.009814839065, 1.65396180769], [-1.658712442301, 0.098200239641, -0.000389705577]]\n",
      "========= =========================================================================================================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fourc.wavelength.put(1.239424258) # Angstrom\n",
    "\n",
    "refs = [\n",
    "    setor(\n",
    "        r.h, r.k, r.l, \n",
    "            tth=r.angles[\"tth\"],\n",
    "            th=r.angles[\"th\"],\n",
    "            chi=r.angles[\"chi\"],\n",
    "            phi=r.angles[\"phi\"],\n",
    "    )\n",
    "    for r in spec_d.reflections\n",
    "]\n",
    "\n",
    "UB = calc_UB(*refs)\n",
    "\n",
    "tbl = pyRestTable.Table()\n",
    "tbl.labels = \"term value\".split()\n",
    "tbl.addRow((\"SPEC [UB]\", spec_d.UB))\n",
    "tbl.addRow((\"E4CV [UB]\", UB))\n",
    "print(tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Report the results, as before, and compare with table above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'triclinic'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fourc.sample.lattice.crystal_system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== ==========================================================================================================================================================\n",
      "term                 value                                                                                                                                                     \n",
      "==================== ==========================================================================================================================================================\n",
      "energy, keV          10.003370326044433                                                                                                                                        \n",
      "wavelength, angstrom 1.239424258                                                                                                                                               \n",
      "position             Hklpy2DiffractometerPseudoPos(h=0, k=0, l=0)                                                                                                              \n",
      "sample name          LNO_LAO                                                                                                                                                   \n",
      "lattice              Lattice(a=3.7817, b=3.7914, c=3.7989, alpha=90.2546, beta=90.0182, gamma=89.8997, system='triclinic')                                                     \n",
      "crystal system       triclinic                                                                                                                                                 \n",
      "[U]                  [[-0.057509522654, -0.998327393204, 0.005922059067], [0.000158283449, 0.005922758763, 0.999982447783], [-0.998344945272, 0.057509450598, -0.000182596327]]\n",
      "[UB]                 [[-0.095549901092, -1.654278634916, 0.002428444854], [0.000262981975, 0.009814839065, 1.65396180769], [-1.658712442301, 0.098200239641, -0.000389705577]] \n",
      "==================== ==========================================================================================================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "tbl = pyRestTable.Table()\n",
    "tbl.labels = \"term value\".split()\n",
    "tbl.addRow((\"energy, keV\", fourc._source.energy))\n",
    "tbl.addRow((\"wavelength, angstrom\", fourc._source.wavelength))\n",
    "tbl.addRow((\"position\", fourc.position))\n",
    "tbl.addRow((\"sample name\", fourc.sample.name))\n",
    "tbl.addRow((\"lattice\", fourc.sample.lattice))\n",
    "tbl.addRow((\"crystal system\", fourc.sample.lattice.crystal_system))\n",
    "tbl.addRow((\"[U]\", fourc.sample.U))\n",
    "tbl.addRow((\"[UB]\", fourc.sample.UB))\n",
    "print(tbl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======= ===== ========= ========= ==========\n",
      "(hkl)   motor E4CV      SPEC      difference\n",
      "======= ===== ========= ========= ==========\n",
      "(0 0 2) th    19.12616  19.13350  -0.00734  \n",
      "(0 0 2) chi   90.01350  90.01350  -0.00000  \n",
      "(0 0 2) phi   0.00000   0.00000   0.00000   \n",
      "(0 0 2) tth   38.08406  38.09875  -0.01469  \n",
      "(1 1 3) th    32.81849  32.82125  -0.00276  \n",
      "(1 1 3) chi   115.20291 115.23625 -0.03334  \n",
      "(1 1 3) phi   48.13305  48.13150  0.00155   \n",
      "(1 1 3) tth   65.63699  65.64400  -0.00701  \n",
      "======= ===== ========= ========= ==========\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Compare these angles with those from SPEC\n",
    "# fourc.calc[\"phi\"].limits = (-1, 100)\n",
    "tbl = pyRestTable.Table()\n",
    "tbl.labels = \"(hkl) motor E4CV SPEC difference\".split()\n",
    "r1, r2 = spec_d.reflections\n",
    "fourc.core.constraints[\"tth\"].limits = (-2, 180)\n",
    "\n",
    "fourc.core.solver.mode = \"constant_phi\"\n",
    "fourc.phi.move(0)\n",
    "add_ref_to_table(tbl, r1)\n",
    "\n",
    "fourc.core.solver.mode = \"bissector\"\n",
    "add_ref_to_table(tbl, r2)\n",
    "\n",
    "print(tbl)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "test",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
