{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# APS POLAR diffractometer \n",
    "\n",
    "*Geometry development.*\n",
    "\n",
    "## Questions\n",
    "\n",
    "- How to get & set $\\psi$ (psi)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import hkl\n",
    "import hklpy2\n",
    "import pyRestTable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start with a 4-circle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Where_Mixin:\n",
    "    digits = 5\n",
    "\n",
    "    @property\n",
    "    def wh(self):\n",
    "        \"\"\"Print tables of pseudos, reals, & extras.\"\"\"\n",
    "\n",
    "        def print_table(names, title=\"\"):\n",
    "            if len(names):\n",
    "                t = pyRestTable.Table()\n",
    "                row = []\n",
    "                for k in names:\n",
    "                    t.labels.append(k)\n",
    "                    if isinstance(names, dict):\n",
    "                        value = names[k]\n",
    "                    else:\n",
    "                        value = getattr(self, k).position\n",
    "                    row.append(round(value, self.digits))\n",
    "                t.addRow(row)\n",
    "\n",
    "                if len(title):\n",
    "                    print(title)\n",
    "                print(t)\n",
    "\n",
    "        print_table(self.pseudo_axis_names, \"pseudos\")\n",
    "        print_table(self.real_axis_names, \"reals\")\n",
    "        print_table(self.operator.solver.extras, \"extras\")\n",
    "\n",
    "\n",
    "class SimDiffractometer(hklpy2.SimulatedE4CV, Where_Mixin):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        super().__init__(\"\", **kwargs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "gonio = hklpy2.SimulatedE4CV(name=\"gonio\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gonio.operator.solver=HklSolver(name='hkl_soleil', version='5.0.0.3511', geometry='E4CV', engine_name='hkl', mode='bissector')\n",
      "gonio.operator.solver.engines=['hkl', 'psi', 'q', 'incidence', 'emergence']\n",
      "gonio.operator.solver.modes=['bissector', 'constant_omega', 'constant_chi', 'constant_phi', 'double_diffraction', 'psi_constant']\n"
     ]
    }
   ],
   "source": [
    "print(f\"{gonio.operator.solver=}\")\n",
    "print(f\"{gonio.operator.solver.engines=}\")\n",
    "print(f\"{gonio.operator.solver.modes=}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wavelength=1.0\n",
      "h=1.0 k=1.0 l=0\n",
      "omega=-45.0 chi=-45.0 phi=-90.0 tth=-90.0\n"
     ]
    }
   ],
   "source": [
    "gonio.move(1, 1, 0)\n",
    "gonio.digits = 4\n",
    "gonio.wh()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gonio.operator.solver=HklSolver(name='hkl_soleil', version='5.0.0.3511', geometry='E4CV', engine_name='hkl', mode='psi_constant')\n"
     ]
    }
   ],
   "source": [
    "gonio.operator.solver.mode = \"psi_constant\"\n",
    "print(f\"{gonio.operator.solver=}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wavelength=1.0\n",
      "h=1.0 k=1.0 l=0\n",
      "omega=-45.0 chi=-45.0 phi=-90.0 tth=-90.0\n"
     ]
    }
   ],
   "source": [
    "gonio.operator.solver.extras = dict(h2=1, k2=0, l2=0)\n",
    "gonio.wh()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SimulatedE4CVRealPos(omega=-135.000000002085, chi=170.264389683157, phi=-45.000000001994, tth=-89.999999999919)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gonio.operator.solver.extras = dict(h2=1, k2=1, l2=0, psi=45)\n",
    "gonio.forward(1, 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SimulatedE4CVPseudoPos(h=1.0, k=0, l=1.0)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gonio.operator.solver.extras = dict(h2=1, k2=1, l2=0, psi=45)\n",
    "gonio.inverse(45, -170, 135, -90)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, use a second diffractometer object with the `\"psi\"` engine.  Fix reals and pseudos, compute $\\psi$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Repeat with Petra3_p09_eh2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Repeat with E6C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Repeat with APS POLAR"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "hklpy",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
