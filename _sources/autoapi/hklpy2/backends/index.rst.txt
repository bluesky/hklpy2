hklpy2.backends
===============

.. py:module:: hklpy2.backends

.. autoapi-nested-parse::

   A Solver connects |hklpy2| with a backend calculation library.

   A :index:`!Solver` class (also described as a *backend*) is a
   Python class that connects |hklpy2| with a library
   that provides diffractometer geometries & calculations.
   See the API documentation for details.

   .. autosummary::

       ~hkl_soleil
       ~no_op
       ~th_tth_q
       ~base



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/hklpy2/backends/base/index
   /autoapi/hklpy2/backends/hkl_soleil/index
   /autoapi/hklpy2/backends/no_op/index
   /autoapi/hklpy2/backends/tests/index
   /autoapi/hklpy2/backends/th_tth_q/index


Classes
-------

.. autoapisummary::

   hklpy2.backends.SolverBase


Package Contents
----------------

.. py:class:: SolverBase(geometry: str, *, mode: str = '', **kwargs)

   Bases: :py:obj:`abc.ABC`


   Base class for all |hklpy2| |solver| classes.

   .. rubric:: Parameters

   * ``geometry``: (str) Name of geometry.
   * ``mode``: (str) Name of operating mode.  (default: current mode)

   Example::

       import hklpy2

       class MySolver(hklpy2.SolverBase):
           ...

   .. note:: :class:`~SolverBase`, an `abstract base
       class <https://docs.python.org/3/library/abc.html#abc.ABC>`_,
       cannot not be used directly by |hklpy2| users.

   As the parent class for all custom :index:`Solver` classes,
   :class:`~SolverBase` defines the methods and attributes to be written
   that will connect |hklpy2| with the support library that defines
   specific diffractometer geometries and the computations for
   using them.  Subclasses should implement each of these methods
   as best fits the underlying support library.

   .. seealso:: :mod:`~hklpy2.backends.hkl_soleil` & :mod:`~hklpy2.backends.no_op`

   .. rubric:: Python Methods

   .. autosummary::

       ~addReflection
       ~calculate_UB
       ~extra_axis_names
       ~forward
       ~geometries
       ~inverse
       ~pseudo_axis_names
       ~real_axis_names
       ~refineLattice
       ~removeAllReflections

   .. rubric:: Python Properties

   .. autosummary::

       ~extra_axis_names
       ~extras
       ~geometry
       ~lattice
       ~mode
       ~modes
       ~sample
       ~UB


   .. py:attribute:: name
      :value: 'base'


      Name of this Solver.


   .. py:attribute:: version
      :value: None


      Version of this Solver.


   .. py:property:: geometry
      :type: str

      :abstractmethod:


      Name of selected diffractometer geometry.

      Cannot be changed once solver is created.  Instead, make a new solver
      for each geometry.


   .. py:property:: mode
      :type: str


      Diffractometer geometry operation mode for :meth:`forward()`.

      A mode defines which axes will be modified by the
      :meth:`forward` computation.


   .. py:attribute:: _sample
      :value: None



   .. py:method:: __repr__() -> str


   .. py:property:: _metadata
      :type: dict


      Dictionary with this solver's summary metadata.


   .. py:method:: addReflection(reflection: hklpy2.blocks.reflection.Reflection) -> None
      :abstractmethod:


      Add coordinates of a diffraction condition (a reflection).



   .. py:method:: calculate_UB(r1: hklpy2.blocks.reflection.Reflection, r2: hklpy2.blocks.reflection.Reflection) -> list[list[float]]
      :abstractmethod:


      Calculate the UB (orientation) matrix with two reflections.

      The method of Busing & Levy, Acta Cryst 22 (1967) 457.



   .. py:property:: extra_axis_names
      :type: list[str]

      :abstractmethod:


      Ordered list of any extra axis names (such as x, y, z).


   .. py:property:: extras
      :type: dict


      Ordered dictionary of any extra parameters.


   .. py:method:: forward(pseudos: dict) -> list[dict[str, float]]
      :abstractmethod:


      Compute list of solutions(reals) from pseudos (hkl -> [angles]).



   .. py:method:: geometries() -> list[str]
      :classmethod:

      :abstractmethod:


      Ordered list of the geometry names.

      EXAMPLES::

          >>> from hklpy2 import get_solver
          >>> Solver = get_solver("no_op")
          >>> Solver.geometries()
          []
          >>> solver = Solver("TH TTH Q")
          >>> solver.geometries()
          []



   .. py:method:: inverse(reals: dict) -> dict[str, float]
      :abstractmethod:


      Compute dict of pseudos from reals (angles -> hkl).



   .. py:property:: lattice
      :type: object


      Crystal lattice parameters.  (Not used by this |solver|.)


   .. py:property:: modes
      :type: list[str]

      :abstractmethod:


      List of the geometry operating modes.


   .. py:property:: pseudo_axis_names
      :type: list[str]

      :abstractmethod:


      Ordered list of the pseudo axis names (such as h, k, l).


   .. py:property:: real_axis_names
      :type: list[str]

      :abstractmethod:


      Ordered list of the real axis names (such as th, tth).


   .. py:method:: refineLattice(reflections: list[hklpy2.blocks.reflection.Reflection]) -> hklpy2.blocks.lattice.Lattice
      :abstractmethod:


      Refine the lattice parameters from a list of reflections.



   .. py:method:: removeAllReflections() -> None
      :abstractmethod:


      Remove all reflections.



   .. py:property:: sample
      :type: object


      Crystalline sample.


   .. py:property:: _summary_dict

      Return a summary of the geometry (modes, axes)


   .. py:property:: summary
      :type: pyRestTable.Table


      Table of this geometry (modes, axes).

      .. seealso:: :ref:`geometries.summary_tables`,
          :func:`hklpy2.user.solver_summary()`


   .. py:property:: UB

      Orientation matrix (3x3).


