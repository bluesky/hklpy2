hklpy2.backends.hkl_soleil
==========================

.. py:module:: hklpy2.backends.hkl_soleil

.. autoapi-nested-parse::

   "hkl_soleil" solver, provides **Hkl**, Synchrotron Soleil.

   Example::

       >>> import hklpy2
       >>> SolverClass = hklpy2.get_solver("hkl_soleil")
       >>> libhkl_solver = SolverClass(geometry="E4CV")
       >>> solver
       HklSolver(name='hkl_soleil', version='v5.0.0.3434', geometry='E4CV', engine='hkl', mode='bissector')

   :home: https://people.debian.org/~picca/hkl/hkl.html
   :source: https://repo.or.cz/hkl.git
   :conda-forge: https://anaconda.org/conda-forge

   ..  caution:: The ``hkl_soleil`` |solver| is not available
       for Windows or Mac OS.  The underlying |libhkl| support
       library is only provided
       for Linux 64-bit OS at this time.

   .. note:: To hold an axis or extra parameter constant (current or specified value):
       choose the mode and set the parameter before the forward() transformation.

   .. note:: To scan using ``psi`` and ``hkl2``, see
       :doc:`/examples/hkl_soleil-e6c-psi`.

   .. autosummary::

       ~HklSolver



Attributes
----------

.. autoapisummary::

   hklpy2.backends.hkl_soleil.logger
   hklpy2.backends.hkl_soleil.AXES_READ
   hklpy2.backends.hkl_soleil.AXES_WRITTEN
   hklpy2.backends.hkl_soleil.LIBHKL_DETECTOR_TYPE
   hklpy2.backends.hkl_soleil.LIBHKL_UNITS
   hklpy2.backends.hkl_soleil.LIBHKL_USER_UNITS
   hklpy2.backends.hkl_soleil.ROUNDOFF_DIGITS


Classes
-------

.. autoapisummary::

   hklpy2.backends.hkl_soleil.HklSolver


Functions
---------

.. autoapisummary::

   hklpy2.backends.hkl_soleil.roundoff_list
   hklpy2.backends.hkl_soleil.hkl_euler_matrix
   hklpy2.backends.hkl_soleil.to_hkl
   hklpy2.backends.hkl_soleil.to_numpy


Module Contents
---------------

.. py:data:: logger

.. py:data:: AXES_READ
   :value: 0


.. py:data:: AXES_WRITTEN
   :value: 1


.. py:data:: LIBHKL_DETECTOR_TYPE
   :value: 0


.. py:data:: LIBHKL_UNITS

.. py:data:: LIBHKL_USER_UNITS

.. py:data:: ROUNDOFF_DIGITS
   :value: 12


.. py:function:: roundoff_list(values, digits=ROUNDOFF_DIGITS)

   Prevent underflows and '-0' for all numbers in a list.


.. py:function:: hkl_euler_matrix(euler_x, euler_y, euler_z)

   Convert into matrix form.


.. py:function:: to_hkl(arr)

   Convert a numpy ndarray to an hkl ``Matrix``

   :param arr:
   :type arr: ndarray

   :rtype: Hkl.Matrix


.. py:function:: to_numpy(mat)

   Convert an hkl ``Matrix`` to a numpy ndarray

   :param mat:
   :type mat: Hkl.Matrix

   :rtype: ndarray


.. py:class:: HklSolver(geometry: str, *, engine: str = 'hkl', mode: str = '', **kwargs)

   Bases: :py:obj:`hklpy2.backends.base.SolverBase`


   ``"hkl_soleil"`` (Linux x86_64 only) |libhkl|.

   Wraps the |libhkl| library, written by Frédéric-Emmanuel PICCA (Soleil),
   with support for many common diffractometer geometries.

   .. rubric:: Parameters

   * geometry: (str) Name of geometry.
   * engine: (str) Name of computation engine.  (default: ``"hkl"``)
   * mode: (str) Name of operating mode.  (default: current mode)
   * pseudos: ([PseudoPositioner]) List of pseudo positioners.
     (default: ``[]``)
   * reals: ([PositionerBase]) List of real positioners.
     (default: ``[]``)

   .. note:: The lists of ``pseudos`` and ``reals`` are the
      corresponding axes of the diffractometer, in the order expected by
      the |solver| geometry.  The diffractometer can use names that are
      different from the names expected by the engine here.  The
      :class:`~hklpys.ops.core` class will convert between the two
      sets of names.

   .. rubric:: Python Methods

   .. autosummary::

       ~addReflection
       ~calculate_UB
       ~forward
       ~geometries
       ~inverse
       ~refineLattice
       ~removeAllReflections
       ~_details

   .. rubric:: Python Properties

   .. autosummary::

       ~_summary_dict
       ~axes_c
       ~axes_r
       ~axes_w
       ~engine
       ~engine_name
       ~engines
       ~extra_axis_names
       ~extras
       ~geometry
       ~lattice
       ~mode
       ~modes
       ~pseudo_axis_names
       ~real_axis_names
       ~sample
       ~summary
       ~UB
       ~wavelength


   .. py:attribute:: name
      :value: 'hkl_soleil'


      Name of this Solver.


   .. py:attribute:: version

      Version of this Solver.


   .. py:attribute:: _hkl_engine
      :value: None



   .. py:attribute:: _sample
      :value: None



   .. py:attribute:: _hkl_detector


   .. py:attribute:: _hkl_factory


   .. py:attribute:: _hkl_engine_list


   .. py:attribute:: _hkl_geometry


   .. py:method:: __repr__() -> str


   .. py:method:: addReflection(reflection: hklpy2.blocks.reflection.Reflection) -> None

      Add coordinates of a diffraction condition (a reflection).



   .. py:property:: axes_c
      :type: list[str]


      HKL real axis names.

      Held constant during 'forward()' computation.


   .. py:property:: axes_r
      :type: list[str]


      HKL real axis names (read-only).


   .. py:property:: axes_w
      :type: list[str]


      HKL real axis names.

      Updated by 'forward()' computation.


   .. py:method:: calculate_UB(r1: hklpy2.blocks.reflection.Reflection, r2: hklpy2.blocks.reflection.Reflection) -> list[list[float]]

      Calculate the UB (orientation) matrix with two reflections.

      The method of Busing & Levy, Acta Cryst 22 (1967) 457.



   .. py:property:: engine
      :type: gi.repository.Hkl.Engine


      Selected computational engine for this geometry.


   .. py:property:: engine_name
      :type: str


      Name of selected computational engine for this geometry.


   .. py:property:: engines
      :type: list[str]


      List of the computational engines available in this geometry.


   .. py:property:: extra_axis_names
      :type: list[str]


      Ordered list of any extra parameter names (such as x, y, z).

      Depends on selected geometry, engine, and mode.


   .. py:property:: extras
      :type: dict


      Ordered dictionary of any extra parameters.

      Depends on selected geometry, engine, and mode.


   .. py:method:: forward(pseudos: dict) -> list[dict[str, float]]

      Compute list of solutions(reals) from pseudos (hkl -> [angles]).



   .. py:method:: geometries() -> list[str]
      :classmethod:


      List all geometries that have one or more computational engines.

      Geometry is not usable without a computational engine.



   .. py:method:: inverse(reals: dict[str, float]) -> dict[str, float]

      Compute tuple of pseudos from reals (angles -> hkl).



   .. py:property:: lattice
      :type: gi.repository.Hkl.Lattice


      Crystal lattice parameters.  (Not used by this |solver|.)


   .. py:property:: mode
      :type: str


      Name of the current geometry operating mode.


   .. py:property:: modes
      :type: list[str]


      List of the geometry operating modes.


   .. py:property:: pseudo_axis_names
      :type: list[str]


      Ordered list of the pseudo axis names (such as h, k, l).


   .. py:property:: real_axis_names
      :type: list[str]


      Ordered list of the real axis names (such as th, tth).


   .. py:method:: refineLattice(reflections: list[hklpy2.blocks.reflection.Reflection]) -> hklpy2.blocks.lattice.Lattice

      Refine the lattice parameters from a list of reflections.

      hkl_soleil uses a simplex method.



   .. py:method:: removeAllReflections() -> None

      Remove all reflections.



   .. py:property:: sample
      :type: gi.repository.Hkl.Sample


      Crystalline sample.  libhkl's sample object.


   .. py:property:: _summary_dict

      Return a summary of the geometry (engines, modes, axes)


   .. py:property:: summary
      :type: pyRestTable.Table


      Table of engines, modes, & axes for this geometry.

      EXAMPLE::

          >>> fourc = hklpy2.creator(name="fourc", geometry="E4CV")
          >>> print(fourc.core.solver.summary)
          ========= ================== ================== ==================== ==================== ===============
          engine    mode               pseudo(s)          real(s)              writable(s)          extra(s)
          ========= ================== ================== ==================== ==================== ===============
          hkl       bissector          h, k, l            omega, chi, phi, tth omega, chi, phi, tth
          hkl       constant_omega     h, k, l            omega, chi, phi, tth chi, phi, tth
          hkl       constant_chi       h, k, l            omega, chi, phi, tth omega, phi, tth
          hkl       constant_phi       h, k, l            omega, chi, phi, tth omega, chi, tth
          hkl       double_diffraction h, k, l            omega, chi, phi, tth omega, chi, phi, tth h2, k2, l2
          hkl       psi_constant       h, k, l            omega, chi, phi, tth omega, chi, phi, tth h2, k2, l2, psi
          psi       psi                psi                omega, chi, phi, tth omega, chi, phi, tth h2, k2, l2
          q         q                  q                  tth                  tth
          incidence incidence          incidence, azimuth omega, chi, phi                           x, y, z
          emergence emergence          emergence, azimuth omega, chi, phi, tth                      x, y, z
          ========= ================== ================== ==================== ==================== ===============


   .. py:property:: U
      :type: list[list[float]]


      Relative orientation of crystal on diffractometer.

      Rotation matrix,  (3x3).


   .. py:property:: UB
      :type: list[list[float]]


      Orientation matrix (3x3).


   .. py:property:: wavelength
      :type: float


      Monochromatic wavelength.


   .. py:property:: _details
      :type: dict


      (internal use) Current settings for diagnostic review.


