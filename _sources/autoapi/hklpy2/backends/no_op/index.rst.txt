hklpy2.backends.no_op
=====================

.. py:module:: hklpy2.backends.no_op

.. autoapi-nested-parse::

   "no_op" solver for testing.

   no reciprocal-space conversions

   Example::

       import hklpy2
       SolverClass = hklpy2.get_solver("no_op")
       noop_solver = SolverClass()

   .. autosummary::

       ~NoOpSolver



Attributes
----------

.. autoapisummary::

   hklpy2.backends.no_op.logger


Classes
-------

.. autoapisummary::

   hklpy2.backends.no_op.NoOpSolver


Module Contents
---------------

.. py:data:: logger

.. py:class:: NoOpSolver(geometry: str, **kwargs)

   Bases: :py:obj:`hklpy2.backends.base.SolverBase`


   ``"no_op"`` (any OS) no transformations.

   |solver| that has no reciprocal space transformations.

   .. rubric:: Python Methods

   .. autosummary::

       ~addReflection
       ~calculate_UB
       ~extra_axis_names
       ~forward
       ~geometries
       ~inverse
       ~pseudo_axis_names
       ~real_axis_names
       ~refineLattice
       ~removeAllReflections

   .. rubric:: Python Properties

   .. autosummary::

       ~geometry
       ~lattice
       ~mode
       ~modes
       ~sample


   .. py:attribute:: name
      :value: 'no_op'


      Name of this Solver.


   .. py:attribute:: version
      :value: None


      Version of this Solver.


   .. py:method:: addReflection(reflection: hklpy2.blocks.reflection.Reflection)

      Add coordinates of a diffraction condition (a reflection).



   .. py:method:: calculate_UB(r1, r2)

      Calculate the UB (orientation) matrix with two reflections.

      The method of Busing & Levy, Acta Cryst 22 (1967) 457.



   .. py:property:: extra_axis_names

      Ordered list of any extra axis names (such as x, y, z).


   .. py:method:: forward(pseudos: dict) -> list[dict[str, float]]

      Compute list of solutions(reals) from pseudos (hkl -> [angles]).



   .. py:method:: geometries()
      :classmethod:


      Ordered list of the geometry names.

      EXAMPLES::

          >>> from hklpy2 import get_solver
          >>> Solver = get_solver("no_op")
          >>> Solver.geometries()
          []
          >>> solver = Solver("TH TTH Q")
          >>> solver.geometries()
          []



   .. py:property:: geometry
      :type: str


      Diffractometer geometry.


   .. py:method:: inverse(reals: dict)

      Compute dict of pseudos from reals (angles -> hkl).



   .. py:property:: modes

      List of the geometry operating modes.


   .. py:property:: pseudo_axis_names

      Ordered list of the pseudo axis names (such as h, k, l).


   .. py:property:: real_axis_names

      Ordered list of the real axis names (such as th, tth).


   .. py:method:: refineLattice(reflections: list[hklpy2.blocks.reflection.Reflection]) -> None

      No refinement.



   .. py:method:: removeAllReflections()

      Remove all reflections.



