hklpy2.blocks.constraints
=========================

.. py:module:: hklpy2.blocks.constraints

.. autoapi-nested-parse::

   Limitations on acceptable positions for computed 'forward()' solutions.

   Computation of the real-space axis positions given a set of reciprocal-space
   coordinates can have many solutions. One or more constraints (Constraint)
   (a.k.a, cut points), together with a choice of operating *mode*, can:

   * Limit the range of ``forward()`` solutions accepted for that positioner.
   * Declare the value to use when the positioner should be kept constant. (not
     implemented yet)

   .. autosummary::

       ~RealAxisConstraints
       ~ConstraintBase
       ~LimitsConstraint

   From **hklpy**, these TODO items:

   - _constraints_dict
   - _constraints_for_databroker
   - _push_current_constraints
   - _set_constraints



Attributes
----------

.. autoapisummary::

   hklpy2.blocks.constraints.NUMERIC
   hklpy2.blocks.constraints.UNDEFINED_LABEL


Classes
-------

.. autoapisummary::

   hklpy2.blocks.constraints.ConstraintBase
   hklpy2.blocks.constraints.LimitsConstraint
   hklpy2.blocks.constraints.RealAxisConstraints


Module Contents
---------------

.. py:data:: NUMERIC

.. py:data:: UNDEFINED_LABEL
   :value: 'undefined'


.. py:class:: ConstraintBase

   Bases: :py:obj:`abc.ABC`


   Base class for all constraints for selecting 'forward()' solutions.

   .. autosummary::

       ~_asdict
       ~valid


   .. py:attribute:: _fields
      :type:  List[str]
      :value: []



   .. py:attribute:: label
      :type:  str
      :value: 'undefined'



   .. py:method:: __repr__() -> str

      Return a nicely-formatted string.



   .. py:method:: _asdict()

      Return a new dict which maps field names to their values.



   .. py:method:: _fromdict(config, core=None)

      Redefine this constraint from a (configuration) dictionary.



   .. py:method:: valid(**values: Dict[str, NUMERIC]) -> bool
      :abstractmethod:


      Is this constraint satisifed by current value(s)?

      PARAMETERS

      values *dict*:
          Dictionary of current 'axis: value' pairs for comparison.



.. py:class:: LimitsConstraint(low_limit=-180, high_limit=180, label=None)

   Bases: :py:obj:`ConstraintBase`


   Value must fall between low & high limits.

   :param low_limit: Lowest acceptable value for this axis when computing real-space solutions
                     from given reciprocal-space positions.
   :type low_limit: float
   :param high_limit: Highest acceptable value for this axis when computing real-space solutions
                      from given reciprocal-space positions.
   :type high_limit: float
   :param label: Name of the axis for these limits.
   :type label: str
   :param .. autosummary::: ~limits
                            ~valid


   .. py:attribute:: label
      :value: None



   .. py:attribute:: _fields


   .. py:method:: __repr__() -> str

      Return a nicely-formatted string.



   .. py:property:: limits

      Return the low and high limits of this constraint.


   .. py:method:: valid(**values: Dict[str, NUMERIC]) -> bool

      True if low <= value <= high.

      PARAMETERS

      reals *dict*:
          Dictionary of current 'axis: value' pairs for comparison.



.. py:class:: RealAxisConstraints(reals: List[str])

   Bases: :py:obj:`dict`


   Constraints for every (real) axis of the diffractometer.

   .. autosummary::

       ~_asdict
       ~_fromdict
       ~valid


   .. py:method:: __repr__() -> str

      Return a nicely-formatted string.



   .. py:method:: _asdict()

      Return all constraints as a dictionary.



   .. py:method:: _fromdict(config, core=None)

      Redefine existing constraints from a (configuration) dictionary.



   .. py:method:: valid(**reals: Dict[str, NUMERIC]) -> bool

      Are all constraints satisfied?



